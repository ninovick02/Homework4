[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "An example pages site with multiple pages and a table of contents. This could be a landing page for the site. Feel free to put whatever here!"
  },
  {
    "objectID": "index.html#description-of-project",
    "href": "index.html#description-of-project",
    "title": "Homework 4",
    "section": "Description of project",
    "text": "Description of project\nPractice loading in data, using piping, and tidyverse to manipulate data."
  },
  {
    "objectID": "index.html#page-0",
    "href": "index.html#page-0",
    "title": "Homework 4",
    "section": "Page 0",
    "text": "Page 0\nYou are here!!"
  },
  {
    "objectID": "index.html#page-1",
    "href": "index.html#page-1",
    "title": "Homework 4",
    "section": "Page 1",
    "text": "Page 1\n\nConceptual Questions\nPractice for midterm 1.\n\nRelative pathing\nR project benefits\nGit and GitHub\nTibble vs Dataframe\nPiping practice"
  },
  {
    "objectID": "index.html#page-2",
    "href": "index.html#page-2",
    "title": "Homework 4",
    "section": "Page 2",
    "text": "Page 2\n\nReading Delimited Data\nUsing tidyverse functions to read in and manipulate data\n\nComma Delimited\nGlass Data\n\n\nFixed Width\nYeast Data"
  },
  {
    "objectID": "index.html#page-3",
    "href": "index.html#page-3",
    "title": "Homework 4",
    "section": "Page 3",
    "text": "Page 3\n\nCombining Excel and Delimited Data\n\nExcel Spreadsheet\nWhite Wine\n\n\nSemicolon Delimited\nRed Wine\n\n\nCombine and Manipulate"
  },
  {
    "objectID": "pages/concepts.html",
    "href": "pages/concepts.html",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n../MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects keep all of the files related to a specific project organized in a centralized folder/working directory. It also automatically sets the current folder as the working directory\n\n\nWhat is git and what is github?\n\n\nGit is a version control system for your code. It keeps track of all the changes that are made and allows you to (somewhat) freely revert to different versions if something breaks. Git also allows for collaboration with others, allowing others to branch, code, merge, and push to the same project. Github allows you access to git online. It has features that streamline the process of coding with git.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibble is a special type of dataframe made specifically for the tidyverse. Is is designed specifically for large data frames, so when printing, it defauts to printing only the first few rows and columns. “Tibbles are data.frames that are lazy and surly”\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt;\nas_tibble() |&gt; select(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "pages/concepts.html#task-1-conceptual-questions",
    "href": "pages/concepts.html#task-1-conceptual-questions",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n../MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\nR projects keep all of the files related to a specific project organized in a centralized folder/working directory. It also automatically sets the current folder as the working directory\n\n\nWhat is git and what is github?\n\n\nGit is a version control system for your code. It keeps track of all the changes that are made and allows you to (somewhat) freely revert to different versions if something breaks. Git also allows for collaboration with others, allowing others to branch, code, merge, and push to the same project. Github allows you access to git online. It has features that streamline the process of coding with git.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nTibble is a special type of dataframe made specifically for the tidyverse. Is is designed specifically for large data frames, so when printing, it defauts to printing only the first few rows and columns. “Tibbles are data.frames that are lazy and surly”\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt;\nas_tibble() |&gt; select(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "pages/read_delimited.html",
    "href": "pages/read_delimited.html",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "Load in necessary libraries\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'forcats' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nVariables:\n\nID RI Na Mg Al Si K Ca Ba Fe Type_of_glass\n\n\nRead in data\n\n# Code is Comma Delimited\nglass_tbl &lt;- read_csv(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", col_names = c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_tbl\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version with meaningful names. Think if/then/else via ifelse(). Continue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\nglass_tbl &lt;- glass_tbl |&gt; \n  mutate(Type_of_glass = ifelse(Type_of_glass == 1, \"building_windows_float_processed\",\n                          ifelse(Type_of_glass == 2, \"building_windows_non_float_processed\", \n                           ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\", \n                            ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\", \n                             ifelse(Type_of_glass == 5, \"containers\", \n                              ifelse(Type_of_glass == 6, \"tableware\", \n                               ifelse(Type_of_glass == 7, \"headlamps\", \"Not a meaningful type of glass\")))))))\n  ) |&gt; \n  filter(Fe &lt; .2, Type_of_glass %in% c(\"tableware\", \"headlamps\"))\n\n\n\n\nRead in data\n\n# Fixed width data\nyeast_tbl &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n         fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3),\n                    c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_tbl\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStart a chain that removes the seq_name and nuc columns. Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\nyeast_tbl &lt;- yeast_tbl |&gt; \n  select(!seq_name, !nuc) |&gt; \n  group_by(class) |&gt; \n  mutate(across(where(is.numeric), \n                .fns = list(mean = mean, median = median), \n                .names = \"{.col}_{.fn}\"))"
  },
  {
    "objectID": "pages/read_delimited.html#task-2-reading-delimited-data",
    "href": "pages/read_delimited.html#task-2-reading-delimited-data",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "Load in necessary libraries\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'forcats' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nVariables:\n\nID RI Na Mg Al Si K Ca Ba Fe Type_of_glass\n\n\nRead in data\n\n# Code is Comma Delimited\nglass_tbl &lt;- read_csv(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\", col_names = c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_tbl\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version with meaningful names. Think if/then/else via ifelse(). Continue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\nglass_tbl &lt;- glass_tbl |&gt; \n  mutate(Type_of_glass = ifelse(Type_of_glass == 1, \"building_windows_float_processed\",\n                          ifelse(Type_of_glass == 2, \"building_windows_non_float_processed\", \n                           ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\", \n                            ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\", \n                             ifelse(Type_of_glass == 5, \"containers\", \n                              ifelse(Type_of_glass == 6, \"tableware\", \n                               ifelse(Type_of_glass == 7, \"headlamps\", \"Not a meaningful type of glass\")))))))\n  ) |&gt; \n  filter(Fe &lt; .2, Type_of_glass %in% c(\"tableware\", \"headlamps\"))\n\n\n\n\nRead in data\n\n# Fixed width data\nyeast_tbl &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n         fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3),\n                    c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_tbl\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStart a chain that removes the seq_name and nuc columns. Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\nyeast_tbl &lt;- yeast_tbl |&gt; \n  select(!seq_name, !nuc) |&gt; \n  group_by(class) |&gt; \n  mutate(across(where(is.numeric), \n                .fns = list(mean = mean, median = median), \n                .names = \"{.col}_{.fn}\"))"
  },
  {
    "objectID": "pages/combining.html",
    "href": "pages/combining.html",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "Load tidyverse\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'forcats' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nImport data from project directory\n\nwhite_wine_tbl &lt;- readxl::read_excel(\"../white-wine.xlsx\", sheet = \"white-wine\")\n\nwhite_wine_tbl\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nImport variable names from sheet 2 on same excel file\n\nwine_vars &lt;- readxl::read_excel(\"../white-wine.xlsx\", sheet = \"variables\")\n\nOverwrite non-standard column names with variables from sheet 2 The variables are in a tibble, so you need to strip it to use the values\n\ncolnames(white_wine_tbl) = wine_vars[[1]]\n\nAdd a column that adds wine type (all white)\n\nwhite_wine_tbl$wine_type = \"white\"\n\n\n\n\nImport data from project directory\n\nred_wine_tbl &lt;- readr::read_csv2(\"../red-wine.csv\") \n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine_tbl &lt;- red_wine_tbl |&gt; \n  mutate(across(where(is.character), as.numeric))\n\ncolnames(red_wine_tbl) = wine_vars[[1]]\n\nred_wine_tbl$wine_type = \"red\"\n\nCombine two data sets into one\n\nall_wines &lt;- dplyr::bind_rows(white_wine_tbl, red_wine_tbl)\n\nFilter data\n\ngood_wines &lt;- all_wines |&gt; \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt; \n  arrange(desc(quality)) |&gt; \n  select(contains(\"acid\"), alcohol, wine_type, quality) |&gt; \n  group_by(quality) |&gt; \n  mutate(across(alcohol, list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\"), \n  )"
  },
  {
    "objectID": "pages/combining.html#task-3-combining-excel-and-delimited-data",
    "href": "pages/combining.html#task-3-combining-excel-and-delimited-data",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "Load tidyverse\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'forcats' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nImport data from project directory\n\nwhite_wine_tbl &lt;- readxl::read_excel(\"../white-wine.xlsx\", sheet = \"white-wine\")\n\nwhite_wine_tbl\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nImport variable names from sheet 2 on same excel file\n\nwine_vars &lt;- readxl::read_excel(\"../white-wine.xlsx\", sheet = \"variables\")\n\nOverwrite non-standard column names with variables from sheet 2 The variables are in a tibble, so you need to strip it to use the values\n\ncolnames(white_wine_tbl) = wine_vars[[1]]\n\nAdd a column that adds wine type (all white)\n\nwhite_wine_tbl$wine_type = \"white\"\n\n\n\n\nImport data from project directory\n\nred_wine_tbl &lt;- readr::read_csv2(\"../red-wine.csv\") \n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine_tbl &lt;- red_wine_tbl |&gt; \n  mutate(across(where(is.character), as.numeric))\n\ncolnames(red_wine_tbl) = wine_vars[[1]]\n\nred_wine_tbl$wine_type = \"red\"\n\nCombine two data sets into one\n\nall_wines &lt;- dplyr::bind_rows(white_wine_tbl, red_wine_tbl)\n\nFilter data\n\ngood_wines &lt;- all_wines |&gt; \n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt; \n  arrange(desc(quality)) |&gt; \n  select(contains(\"acid\"), alcohol, wine_type, quality) |&gt; \n  group_by(quality) |&gt; \n  mutate(across(alcohol, list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\"), \n  )"
  }
]